openapi: 3.0.0

info:
  title: Authentication API
  description: An authentication API with registration, sign in, sign out, profile and admin features
  version: "1.0.0"
  contact:
    name: Rafael Fernandes Lopes
    email: rafael.fernandes@gmail.com

servers:
  - url: https://express-typescript-auth.onrender.com
    description: Production server

  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        default: "3000"

paths:
  ### AUTHENTICATION ENDPOINTS
  /:
    get:
      summary: Hello endpoint
      description: >
        An open hello world endpoint
      tags:
        - Authentication

      security: []

      responses:
        '200':
          description: Return a hello world message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: The request success status
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Hello world string message
                        example: Hello world

  /login:
    post:
      summary: Login endpoint
      description: >
        This endpoint allows to perform a login and receive the refresh and access tokens
      tags:
        - Authentication

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Login email
                  example: rafael.fernandes@gmail.com
                password:
                  type: string
                  description: Login password
                  example: password
      security: []

      responses:
        '201':
          description: Return a successful sign in result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: Access token returned in the response body
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTRjYzE5MzA5YzQyOTVjYjU4Zjk5OCIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNjg5MTM0MTM0LCJleHAiOjE2ODkxMzQ3MzR9.R7DCLWkHh2lOWDRcwlOmf2ivEC3jg6JxZp6n2HPTjn8
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: refreshToken=abcde12345; Max-Age=86400; Domain=localhost; Path=/; HttpOnly; Secure; SameSite=None

        '401':
          description: Return an unauthorized response in case login parameters are not valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid email or password"

        '422':
          description: Return an unprocessable content response in case there are missing fields in the request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/MissingLoginFields'

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

  /register:
    post:
      summary: User registration endpoint
      description: >
        This endpoint allows one to create a new user
      tags:
        - Authentication
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User name
                  example: Rafael Fernandes Lopes
                email:
                  type: string
                  description: User email
                  example: rafael.fernandes@gmail.com
                password:
                  type: string
                  description: User password
                  example: password
                passwordConfirmation:
                  type: string
                  description: User password confirmation
                  example: password

      security: []

      responses:
        '201':
          description: Return a successful sign in result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: string
                    description: Account registration message
                    example: Account registered sucessfully

        '409':
          description: Return a conflict error message informing that the user email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User with given email already exists

        '422':
          description: Return an unprocessable content response in case there are missing fields in the request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/MissingRegisterFields'

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

  /refresh:
    post:
      summary: Endpoint for refreshing the expired accessToken
      description: >
        This endpoint allows one generate a new access token in replacement to an expired one. In order to increase the security of the API, this endpoint also rotates the refresh token
      tags:
        - Authentication

      security:
        - refreshToken: []

      responses:
        '200':
          description: Return a new access and refresh tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: The new access token
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTRjYzE5MzA5YzQyOTVjYjU4Zjk5OCIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNjg5MTM0MTM0LCJleHAiOjE2ODkxMzQ3MzR9.R7DCLWkHh2lOWDRcwlOmf2ivEC3jg6JxZp6n2HPTjn8
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: refreshToken=abcde12345; Max-Age=86400; Domain=localhost; Path=/; HttpOnly; Secure; SameSite=None

        '403':
          description: Return a forbidden error in case an error occurs processing the refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Refresh token unavailable. You need to perform the sign in again."

  /logout:
    post:
      summary: Endpoint for signing out from the authentication API
      description: >
        This endpoint allows one to logout from this application, invalidating both refresh and access tokens
      tags:
        - Authentication

      security: [ { refreshToken: [] }, { accessToken: []  } ]

      responses:
        '303':
          description: Perform the user logout and redirect to the home page

          headers: 
            Location:
              schema: 
                type: string
                example: /

        '403':
          description: Return a forbidden error in case an error occurs processing the logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Refresh token unavailable. You need to perform the sign in again."

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

  /profile:
    get:
      summary: Get user profile data in case the user is signed in
      description: >
        This endpoint allows one to get it's user profile data, as well as to check if the session is currently signed in
      
      tags:
        - Authentication

      security:
        - accessToken: []

      responses:
        '200':
          description: Return the user's profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '403':
          description: Return a forbidden error in case an error occurs processing the request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "It was not possible to retrieve user data"

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

    patch:
      summary: Update user profile data of a signed in user
      description: >
        This endpoint allows one to update it's user profile data
      tags:
        - Authentication
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  description: User name
                  example: Rafael Fernandes Lopes
                password:
                  type: string
                  description: User password
                  example: password
                passwordConfirmation:
                  type: string
                  description: User password confirmation. It is only mandatory if a valid password field is provided
                  example: password
                photo:
                  type: string
                  description: User's photo URL
                  example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRrFe_1bqd-KCl2sbFivhvyt4aZ65AyC8habg&usqp=CAU"
                aboutMe:
                  type: string
                  description: User's bio
                  example: "It's me, Mario!"

      security:
        - accessToken: []

      responses:
        '200':
          description: Return the user's profile data if the user has been successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: Return a bad request error in case it was not possible to update the user profile data in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unable to update user data"
                    
        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '422':
          description: Return an unprocessable content response in case there are missing fields in the request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/MissingUpdateProfileFields'

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

  ### PROTECTED ENDPOINTS
  /api/v1/protected:
    get:
      summary: Sample dummy endpoint with no data, protected by access token
      description: >
        This endpoint returns just a simple string, but works as an example of a route protected by an access token with user role
      tags:
          - Protected

      security:
        - accessToken: []

      responses:
        '200':
          description: Returns a dummy string if the user is signed in with a valid access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    description: Protected endpoint message
                    example: Accessing a protected route!

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

  /api/v1/adminProtected:
    get:
      summary: Sample dummy endpoint with no data, protected by an admin access token
      description: >
        This endpoint returns just a simple string, but works as an example of a route protected by an access token with admin role
      tags:
          - Protected

      security:
        - accessToken: ["admin"]

      responses:
        '200':
          description: Returns a dummy string if the user is signed in with a valid admin access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    description: Admin protected endpoint message
                    example: Accessing an admin protected route!

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '403':
          description: Return a forbidden error (access denied) in case the access token hasn't the admin role
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AccessDeniedError'

  ### ADMIN ENDPOINTS
  /api/v1/admin/createAccount:
    post:
      summary: Admin account creation endpoint
      description: >
        This endpoint allows an administrator to create a new account (with user or admin role)

      tags:
          - Admin

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  description: User name
                  example: Rafael Fernandes Lopes
                password:
                  type: string
                  description: User password
                  example: password
                passwordConfirmation:
                  type: string
                  description: User password confirmation. It is only mandatory if a valid password field is provided
                  example: password
                photo:
                  type: string
                  description: User's photo URL
                  example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRrFe_1bqd-KCl2sbFivhvyt4aZ65AyC8habg&usqp=CAU"
                aboutMe:
                  type: string
                  description: User's bio
                  example: "It's me, Mario!"

      security:
        - accessToken: []

      responses:
        '200':
          description: Returns a successful response in case the account is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    description: Account creation message
                    example: "Account registered sucessfully"

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '403':
          description: Return a forbidden error (access denied) in case the access token hasn't the admin role
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AccessDeniedError'

        '409':
          description: Return a conflict error message informing that the user email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User with given email already exists

        '422':
          description: Return an unprocessable content response in case there are missing fields in the request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/MissingCreateAccountFields'

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/user/{userId}:
    get:
      summary: Admin endpoint to retrieve the user data associated with an specific userId
      description: >
        This endpoint allows an administrator to retrieve the data from an user
      
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String id of the user to get
          example: 64a4cc19309c4295cb58f998

      tags:
          - Admin

      security:
        - accessToken: []

      responses:
        '200':
          description: Return the user data from an specific userId
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '403':
          description: Return a forbidden error (access denied) in case the access token hasn't the admin role
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AccessDeniedError'

        '404':
          description: Return a not found error if the userId is not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unable to retrieve user data

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

    patch:
      summary: Admin endpoint to update the user data associated with an specific userId
      description: >
        This endpoint allows an administrator to update the data from an user
      
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String id of the user to get
          example: 64a9061de2f39131827c8982

      tags:
          - Admin

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  description: User name
                  example: Rafael Fernandes Lopes
                password:
                  type: string
                  description: User password
                  example: password
                passwordConfirmation:
                  type: string
                  description: User password confirmation. It is only mandatory if a valid password field is provided
                  example: password
                photo:
                  type: string
                  description: User's photo URL
                  example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRrFe_1bqd-KCl2sbFivhvyt4aZ65AyC8habg&usqp=CAU"
                aboutMe:
                  type: string
                  description: User's bio
                  example: "It's me, Mario!"

      security:
        - accessToken: []

      responses:
        '200':
          description: Update the user data from an specific userId and return the updated data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: Return a bad request error in case it was not possible to update the user data in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unable to update user data"

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '403':
          description: Return a forbidden error (access denied) in case the access token hasn't the admin role
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AccessDeniedError'

        '422':
          description: Return an unprocessable content response in case there are missing fields in the request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/MissingUpdateUserFields'

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Admin endpoint to delete the user data associated with an specific userId
      description: >
        This endpoint allows an administrator to delete the data from an user (except data from the requesting user)
      
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String id of the user to get
          example: 64a9061de2f39131827c8982

      tags:
          - Admin

      security:
        - accessToken: []

      responses:
        '200':
          description: Delete the user data from an specific userId and return the deleted data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: Return a bad request error in case it was not possible to delete the user data from the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unable to delete user data"

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '403':
          description: Return a forbidden error (access denied) in case the access token hasn't the admin role
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AccessDeniedError'

        '409':
          description: Return a conflict error message informing that the current user cannot delete its own user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: You cannot delete your own user

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/users:
    get:
      summary: Get data from all registered users
      description: >
        This endpoint allows an administrator to retrieve the data from all registered users
      
      tags:
        - Admin

      security:
        - accessToken: []

      responses:
        '200':
          description: Return the data from all registered users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

        '401':
          description: Return an unauthorized error in case an error occurs processing the access token (such as invalid token, malformed, expired, null token, null payload, etc)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TokenError'

        '403':
          description: Return a forbidden error (access denied) in case the access token hasn't the admin role
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AccessDeniedError'

        '500':
          description: Return a server error status
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    refreshToken:
      type: apiKey
      in: cookie
      name: refreshToken

    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    MissingLoginFields:
      type: object
      required:
        - success
        - errors
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Description of the returned error
                example: Invalid email address
          example:
            - { message: "Invalid email address" }
            - { message: "'password' is required and must exceed 5 characters" }

    MissingUpdateProfileFields:
      type: object
      required:
        - success
        - errors
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Description of the returned error
                example: "Passwords do not match"
          example:
            - { message: "Passwords do not match" }

    MissingRegisterFields:
      type: object
      required:
        - success
        - errors
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Description of the returned error
                example: Invalid email address
          example:
            - { message: "'name' is required and must exceed 5 characters" }
            - { message: "Invalid email address" }
            - { message: "'password' is required and must exceed 5 characters" }
            - { message: "Passwords do not match" }

    MissingCreateAccountFields:
      type: object
      required:
        - success
        - errors
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Description of the returned error
                example: Invalid email address
          example:
            - { message: "'name' is required and must exceed 5 characters" }
            - { message: "Invalid email address" }
            - { message: "'password' is required and must exceed 5 characters" }
            - { message: "'role' is required and must have a valid value" }

    MissingUpdateUserFields:
      type: object
      required:
        - success
        - errors
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Description of the returned error
                example: "'photo' must be a valid URL"
          example:
            -  { message: "'name' must exceed 5 characters" }
            - { message: "'password' must exceed 5 characters" }
            - { message: "Passwords do not match" }
            - { message: "'photo' must be a valid URL" }


    TokenError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error decoding access token"

    AccessDeniedError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Access denied! ❌"

    InternalServerError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Oops, something went wrong!"

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user id
          example: 64a4cc19309c4295cb58f998
        name:
          type: string
          description: User's name
          example: Rafael Fernandes Lopes
        email:
          type: string
          description: User's email
          example: rafael.fernandes@gmail.com
        role:
          type: string
          enum: [
            "user",
            "admin"
          ]
          description: User's permission role
          example: user
        photo:
          type: string
          description: User's photo URL
          example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRrFe_1bqd-KCl2sbFivhvyt4aZ65AyC8habg&usqp=CAU"
        aboutMe:
          type: string
          description: User's bio
          example: "It's me, Mario!"
